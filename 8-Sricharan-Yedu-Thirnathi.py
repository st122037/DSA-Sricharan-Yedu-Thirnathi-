# -*- coding: utf-8 -*-
"""8-Sricharan-Yedu-Thirnathi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c7x0EEbtEry9QxiSa2oPSzaYMz_gdvjN
"""

class Node:
    def __init__(self, val):
        self.l = None
        self.r = None
        self.v = val

class Tree:
    def __init__(self):
        self.root = None

    def getRoot(self):
        return self.root

    def add(self, val):
        if self.root is None:
            self.root = Node(val)
        else:
            self._add(val, self.root)

    def _add(self, val, node):
        if val < node.v:
            if node.l is not None:
                self._add(val, node.l)
            else:
                node.l = Node(val)
        else:
            if node.r is not None:
                self._add(val, node.r)
            else:
                node.r = Node(val)

    def find(self, val):
        if self.root is not None:
            return self._find(val, self.root)
        else:
            return None

    def _find(self, val, node):
        if val == node.v:
            return node
        elif (val < node.v and node.l is not None):
            return self._find(val, node.l)
        elif (val > node.v and node.r is not None):
            return self._find(val, node.r)

    def minimum(self):
      while self.l != None:
        self = self.l
      return self.v

    def successor(self, x):
      if x.r != None:
        return self.minimum(x.r)
      y = x.p
      while y != None and x == y.r:
        x = y
        y = y.p
      return y

    def deleteTree(self):
        self.root = None

    def printTree(self):
        if self.root is not None:
            self._printTree(self.root)

    def _printTree(self, node):
        if node is not None:
            self._printTree(node.l)
            print(str(node.v) + ' ')
            self._printTree(node.r)

tree = Tree()
tree.add(5)
tree.add(4)
tree.add(0)
tree.add(2)
tree.add(3)
#tree.printTree()
print(tree.find(3).v)
print(tree.find(10))
#tree.deleteTree()
tree.successor(3)
tree.printTree()